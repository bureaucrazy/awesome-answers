<%#
  The form_for helper method can take an ActiveRecord object as a first argument
  for instance, @question which is of class Question.
  Rails, by convention, will do the following:
  1. For (New / Create):
     If @question is not persisted in the db, it will make the action
     for the form 'questions_path'. It will look for the class name of
     the passed object (in this case it's Question) and by convention
     submit to questions_path
  2. For (Edit / Update):
     If @question is persisted to the db, it will make the action for
     the form go to question_path (/question/:id) (where :id is the id of @question)
     and it will make the form submit a PATCH request in order for this
     form to submit to the update action in our controller. (Edit / Update)
  %>

  <% if @question.errors.any? %>
    <ul>
      <% @question.errors.full_messages.each do |msg| %>
      <li><%= msg %></li>
      <% end %>
    </ul>
  <% end %>

  <%= form_for @question, html: {class: "form-horizontal"} do |f| %>
  <%#
  If you don't pass any option for f.submit it will:
    1. If @question is not persisted it will make the button lable "Create [Object Class]"
    2. If @question is persisted it will make the button label "Update [Object Class]"
  %>
  <div class="form-group">
    <%= f.label :title %>
    <%#
    Using the f.text_field ensures that Rails will use the proper 'name' HTML
    attribute and it will also populate the text field with data if @question
    title has a value
    %>
    <%= f.text_field :title, class: "form-control" %>
  </div>
  <div class="form-group">
    <%= f.label :body %>
    <%= f.text_area :body, class: "form-control" %>
  </div>
  <div class="form-group">
    <%= f.label :category_id %>
    <%= f.collection_select :category_id, Category.all, :id, :name, {}, {class: "form-control"} %>
  </div>
  <div class="form-group">
  <%= f.submit class: "btn btn-primary", data: {disable_with: "saving.."} %>
  </div>
<% end %>
